package  {		import flash.events.Event;	import flash.events.MediaEvent;	import flash.media.MediaPromise;	import flash.media.MediaType;	import flash.media.CameraRoll;	import flash.media.CameraUI;	import flash.display.Loader;	import flash.filesystem.File;	import flash.display.Sprite;	import flash.text.TextField;		public class ReadImage extends Sprite{				// アプリケーションの状態管理		var enableAppExit:Boolean = true;		//カメラクラス		var cameraRoll:CameraRoll;		var camera:CameraUI;		//読み込んだファイルの格納場所		var mySprite:Sprite; 				// 画像読み込み関係		var loader:Loader;		var file:File;		//		var DISPLAY_W:int = 480;		var DISPLAY_H:int = 800;		var myTxt;		//		var imageType:String;				public function ReadImage(w:int, h:int) {			DISPLAY_W = w;			DISPLAY_H = h;									myTxt = new TextField();			loader = new Loader();			mySprite = new Sprite();						this.addChild(mySprite);			//this.addChild(loader);						this.addChild(myTxt);			//init();					}		public function init(myImageType:String = "FILE"):void{			// 画面に表示			//loader = new Loader();			//this.addChild(loader);						imageType = myImageType;						enableAppExit = false;						if(imageType == "FILE"){				cameraRoll = new CameraRoll();				cameraRoll.addEventListener(MediaEvent.SELECT,onSelectHD);				cameraRoll.browseForImage();			}else if(imageType == "CAMERA"){				camera = new CameraUI();				camera.addEventListener(MediaEvent.COMPLETE,onSelectHD);				camera.launch(MediaType.IMAGE);	//写真撮影モード 				//camera.launch(MediaType.VIDEO);		//動画撮影モード			}					}				private function onSelectHD(evt:MediaEvent):void{			//画像読み込み			var mp:MediaPromise = evt.data;			loadImage(mp);						// ファイルの参照を保存			file = mp.file;					// アプリ終了防止フラグの解除			enableAppExit = true;		}		// 共通の読み込み処理		private function loadImage(mp:MediaPromise):void {						// 2度目以降の読み込みのため			//mySprite.removeChild(loader);			loader.unload();			loader.scaleX = loader.scaleY = 1;					if (mp.isAsync) {				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoaderComplete);				loader.loadFilePromise(mp);			} else {				loader.loadFilePromise(mp);				onLoaderComplete(null);			}		}				// 画像の読み込み完了後		private function onLoaderComplete(evt:Event) {			// 画像を画面内に収まるようにスケールの調整			adjustScale(DISPLAY_W, DISPLAY_H);						//センターに配置			mySprite.addChild(loader);			mySprite.x = mySprite.width / -2;			mySprite.y = mySprite.height / -2;					}				// 画像を画面内に収まるようにスケールの調整		private function adjustScale(w:int, h:int):void {						//Debug用			myTxt.text = "W/"+ String(Math.floor(loader.width)) + "/H/"+ String(Math.floor(loader.height));						//全ての画像が横向きに読み込まれるので回転させる			loader.rotation = 90;						// 縮小処理;			var iw:Number = w / loader.width * loader.scaleX;			var ih:Number = h / loader.height * loader.scaleY;			var scale:Number = Math.min(iw,ih);					loader.scaleX = loader.scaleY = scale;						loader.x = loader.width;			loader.y = 0;									}				//		public function get FilePath(){			return file;		}		/*public function set imageResize(myScale){			loader.scaleX = loader.scaleY += myScale;		}				//		public function imageRotation(){			loader.rotation += 90;		}*/			}	}